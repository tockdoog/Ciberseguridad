Una wildcard (comod√≠n) es un s√≠mbolo o conjunto de s√≠mbolos que se usa para representar uno o varios caracteres desconocidos en un patr√≥n de b√∫squeda o coincidencia.

Piensa en ellas como ‚Äúletras comod√≠n‚Äù que le dicen a un programa: ‚Äúaqu√≠ puede ir cualquier cosa que encaje con este patr√≥n‚Äù.

üîπ Ejemplos comunes
1. En la terminal (Linux, Git Bash, etc.)
* ‚Üí Representa cualquier n√∫mero de caracteres (incluso cero).
? ‚Üí Representa exactamente un car√°cter.

ls *.txt     # muestra todos los archivos que terminan en .txt
ls a?.txt    # muestra archivos como a1.txt, ab.txt (solo 1 car√°cter entre 'a' y '.txt')

2. En .gitignore
Sirven para ignorar patrones de archivos:
*.swp   # ignora cualquier archivo que termine en .swp
WSL/*   # ignora todo dentro de la carpeta WSL

3. En expresiones regulares (Regex)
En Regex no se llaman ‚Äúwildcards‚Äù como tal, pero el . funciona parecido:
. ‚Üí Cualquier car√°cter individual.
.* ‚Üí Cualquier secuencia de caracteres.
c.t     # coincide con cat, cot, cut

üìå En resumen
Una wildcard es como decirle al sistema:
"Aqu√≠ puede ir cualquier cosa que coincida con este patr√≥n que te doy".

| S√≠mbolo          | Significado                                                                    | Ejemplo                  | Coincidencias                          |
| ---------------- | ------------------------------------------------------------------------------ | ------------------------ | -------------------------------------- |
| `*`              | Cualquier n√∫mero de caracteres (incluyendo 0)                                  | `ls *.txt`               | `notas.txt`, `hola.txt`, `a.txt`       |
| `?`              | Exactamente 1 car√°cter                                                         | `ls a?.txt`              | `a1.txt`, `ab.txt` pero no `abc.txt`   |
| `[abc]`          | Un solo car√°cter que sea **a, b o c**                                          | `ls file[123].txt`       | `file1.txt`, `file2.txt`, `file3.txt`  |
| `[a-z]`          | Un car√°cter dentro de un rango                                                 | `ls foto[1-5].png`       | `foto1.png`, `foto3.png`               |
| `[^abc]`         | Un car√°cter que **NO** sea a, b o c                                            | `ls file[^1].txt`        | `file2.txt`, `file3.txt`               |
| `{uno,dos,tres}` | Cualquier palabra entre llaves                                                 | `ls {enero,febrero}.txt` | `enero.txt`, `febrero.txt`             |
| `**`             | Coincide recursivamente en subdirectorios (si `shopt -s globstar` est√° activo) | `ls **/*.txt`            | Todos los `.txt` en todas las carpetas |

